!!! XML
!!! 1.1
%html{:xmlns => "http://www.w3.org/1999/xhtml"}
  %head
    %title= title
    %link{:rel => "stylesheet", :href => "file:///android_asset/support/master.css"}/
    %link{:rel => "stylesheet", :href => "../../support/master.css"}/
    %script{:src => "file:///android_asset/support/logic.js", :type => "text/javascript"}
    %script{:src => "../../support/logic.js", :type => "text/javascript"}
    :javascript
      window.onload = function() {
        var help_btn = $("help_btn");
        if (help_btn) {
          help_btn.onclick = function() {
            var help_text = $("help_text");
            if (help_text.style.visibility === "hidden" ||
              !help_text.style.visibility) {
                help_text.style.visibility = "visible";
            }
            else {
              help_text.style.visibility = "hidden";
            };
          };
        }
        if (getElementsByClassName("marktext").length > 0) {
          initMarktexts();
        };
        
        var done_btn = $("done_btn");
        done_btn.onclick = function() {
          var mc_solved = true;
          var sc_solved = true;
          var mark_solved = true;
          var cloze_solved = true;
          var drops_solved = true;
          
          if (getElementsByClassName("multiple_choice").length > 0) {
            mc_solved = checkMultipleChoices();
          };
          
          if (getElementsByClassName("marktext").length > 0) {
            mark_solved = checkMarktexts();
          };
          
          if (getElementsByClassName("gapquestion").length > 0) {
            cloze_solved = checkGapQuestions();
          };  
          
          if (getElementsByClassName("dropdown").length > 0) {
            drops_solved = checkDropdowns();
          };
          
          if (getElementsByClassName("single_choice").length > 0) {
            sc_solved = checkSingleChoices();
          };
          
          if (mc_solved && sc_solved && mark_solved && cloze_solved && drops_solved) {
            window.abp.saveToDb(true);
          }
          else {
            window.abp.saveToDb(false);
          };
        };
      };
      
  %body
    #question_text
      %p
        %strong= question
    - construct_sequence.each do |type|
      -if @evenodd
        %div{:class => "even"}
          -@evenodd = false
          - if type.class == MultipleChoice
            - unless type.sub_question.nil?
              %p
                %strong= type.sub_question
            %div{:class => "multiple_choice", :id => "mc#{type.id}"}
              - type.multiple_choice_options.each do |option|
                %p
                  %input{:type => "checkbox", :name => ("option" + option.id.to_s)}
                  = option.option
            %div{:class => "hidden", :id => "mc#{type.id}_sol"}
              - type.multiple_choice_options.each do |option|
                - if option.check
                  %span= "option" + option.id.to_s
          - elsif type.class == Marktext
            - unless type.sub_question.nil?
              %p
                %strong= type.sub_question
            %div{:class => "marktext", :id => "marktext#{type.id}"}
              %p
                %em
                  - type.mark.split.each_with_index do |word, i|
                    - word.split(/(\(:.+:\))/x).each_with_index do |char, j|
                      :erb
                        <% if char =~ /\(:.+:\)/x %>
                          <span class="mark"><%= char.split(/\(:(.+):\)/x) %></span>
                        <% else %>
                          <span><%= char %></span>
                        <% end %>
          - elsif type.class == Cloze
            - unless type.sub_question.nil?
              %p
                %strong= type.sub_question
            %div{:class => "gapquestion", :id => "cloze#{type.id}"}
              - type.cloze_text.split.each_with_index do |word, i|
                - word.split(/(\(:.+:\))/x).each_with_index do |char, j|
                  :erb
                    <% if char =~ /\(:.+:\)/x %>
                    <input type ="text" size=<%= (char.length-4).to_s %> 
                    name = "gap<%= i.to_s+ j.to_s %>" />
                    <% else %>
                      <span><%= char %></span>
                    <% end %>
            %div{:id => "cloze#{type.id}_sol", :class => "hidden"}
              - type.cloze_text.split.each_with_index do |word, i|
                - word.split(/(\(:.+:\))/x).each_with_index do |char,j|
                  - if char =~ /\(:.+:\)/x
                    %span{:id => "gap#{i.to_s+j.to_s}"}= char.split(/\(:(.+):\)/x)
          - elsif type.class == Dropdown
            - unless type.sub_question.nil?
              %p
                %strong= type.sub_question
            %div{:id => "drop#{type.id}", :class => "dropdown"}
              - type.dropdown_definitions.each do |defi|
                %p
                  = defi.definition
                  %select 
                    - defi.dropdown_options.each do |option|
                      - if option.check
                        %option.correct_option{:value => option.option}= option.option
                      - else
                        %option{:value => option.option}= option.option
          - elsif type.class == SingleChoice
            - unless type.sub_question.nil?
              %p
                %strong= type.sub_question
            %div{:class => "single_choice", :id => "sc#{type.id}"}
              - type.single_choice_options.each do |option|
                %p
                  %input{:type => "radio", :name => "option#{type.id}", :id => "sc_option#{option.id}"}
                  = option.option
            %div{:id => "sc#{type.id}_sol", :class => "hidden"}
              - type.single_choice_options.each do |option|
                - if option.check
                  %span= "sc_option#{option.id}"
      -else
        %div{:class => "odd"}
          -@evenodd = true
          - if type.class == MultipleChoice
            - unless type.sub_question.nil?
              %p
                %strong= type.sub_question
            %div{:class => "multiple_choice", :id => "mc#{type.id}"}
              - type.multiple_choice_options.each do |option|
                %p
                  %input{:type => "checkbox", :name => ("option" + option.id.to_s)}
                  = option.option
            %div{:class => "hidden", :id => "mc#{type.id}_sol"}
              - type.multiple_choice_options.each do |option|
                - if option.check
                  %span= "option" + option.id.to_s
          - elsif type.class == Marktext
            - unless type.sub_question.nil?
              %p
                %strong= type.sub_question
            %div{:class => "marktext", :id => "marktext#{type.id}"}
              %p
                %em
                  - type.mark.split.each_with_index do |word, i|
                    - word.split(/(\(:.+:\))/x).each_with_index do |char, j|
                      :erb
                        <% if char =~ /\(:.+:\)/x %>
                          <span class="mark"><%= char.split(/\(:(.+):\)/x) %></span>
                        <% else %>
                          <span><%= char %></span>
                        <% end %>
          - elsif type.class == Cloze
            - unless type.sub_question.nil?
              %p
                %strong= type.sub_question
            %div{:class => "gapquestion", :id => "cloze#{type.id}"}
              - type.cloze_text.split.each_with_index do |word, i|
                - word.split(/(\(:.+:\))/x).each_with_index do |char, j|
                  :erb
                    <% if char =~ /\(:.+:\)/x %>
                    <input type ="text" size=<%= (char.length-4).to_s %> 
                    name = "gap<%= i.to_s+ j.to_s %>" />
                    <% else %>
                      <span><%= char %></span>
                    <% end %>
            %div{:id => "cloze#{type.id}_sol", :class => "hidden"}
              - type.cloze_text.split.each_with_index do |word, i|
                - word.split(/(\(:.+:\))/x).each_with_index do |char,j|
                  - if char =~ /\(:.+:\)/x
                    %span{:id => "gap#{i.to_s+j.to_s}"}= char.split(/\(:(.+):\)/x)
          - elsif type.class == Dropdown
            - unless type.sub_question.nil?
              %p
                %strong= type.sub_question
            %div{:id => "drop#{type.id}", :class => "dropdown"}
              - type.dropdown_definitions.each do |defi|
                %p
                  = defi.definition
                  %select 
                    - defi.dropdown_options.each do |option|
                      - if option.check
                        %option.correct_option{:value => option.option}= option.option
                      - else
                        %option{:value => option.option}= option.option
          - elsif type.class == SingleChoice
            - unless type.sub_question.nil?
              %p
                %strong= type.sub_question
            %div{:class => "single_choice", :id => "sc#{type.id}"}
              - type.single_choice_options.each do |option|
                %p
                  %input{:type => "radio", :name => "option#{type.id}", :id => "sc_option#{option.id}"}
                  = option.option
            %div{:id => "sc#{type.id}_sol", :class => "hidden"}
              - type.single_choice_options.each do |option|
                - if option.check
                  %span= "sc_option#{option.id}"

    #footer
      %a{:href => "?prev"}
        %input{:type => "button", :id => "back_btn", :name => "back_btn", :value => "ZurÃ¼ck"}/
      %input{:type => "button", :id => "done_btn", :name => "done_btn", :value => "Fertig"}
      - unless help.blank?
        %input{:type => "button", :name => "help_btn", :id => "help_btn", :value => "Hilfe"}
      %a{:href => "?next"}
        %input{:type => "button", :id => "next_btn", :name => "next_btn", :value => "Weiter"}
    - unless help.blank?
      #help_text.hidden
        = help