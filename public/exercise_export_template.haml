!!! XML
!!! 1.1
%html{:xmlns => "http://www.w3.org/1999/xhtml"}
	%head
		%title= title
		%link{:rel => "stylesheet", :href => "file:///android_asset/support/master.css"}/
		%link{:rel => "stylesheet", :href => "../support/master.css"}/
		%script{:src => "file:///android_asset/support/logic.js", :type => "text/javascript"}/
		%script{:src => "../support/logic.js", :type => "text/javascript"}/
		:javascript
			window.onload = function() {
				var help_btn = $("help_btn");
				if (help_btn) {
					help_btn.onclick = function() {
						var help_text = $("help_text");
						if (help_text.style.visibility === "hidden" ||
							!help_text.style.visibility) {
								help_text.style.visibility = "visible";
						}
						else {
							help_text.style.visibility = "hidden";
						};
					};
				}
				if ($("marktext")) {
					initMarktext();
				};
				
				var done_btn = $("done_btn");
				done_btn.onclick = function() {
					var mc_solved = true;
					var sc_solved = true;
					var mark_solved = true;
					var cloze_solved = true;
					var drops_solved = true;
					
					if ($("multiple_choice")) {
						mc_solved = checkMultipleChoice();
					};
					
					if ($("marktext")) {
						mark_solved = checkMarktext();
					};
					
					if ($("gapquestion")) {
						cloze_solved = checkGapQuestion();
					};	
					
					if ($("dropdown")) {
						drops_solved = checkDropdown();
					};
					
					if ($("single_choice")) {
						sc_solved = checkSingleChoice();
					};
					
					if (mc_solved && sc_solved && mark_solved && cloze_solved && drops_solved) {
						alert("Solved everything correct");
					}
					else {
						alert("Sorry. You've made some mistakes!");
					};
				};
			};
			
	%body
		#question_text
			%p
				%strong= question
		%hr/
		- @export_type_order.each do |type|
			- if type.class == MultipleChoice
				#multiple_choice
					- for option in type.multiple_choice_options
						%p
							%input{:type => "checkbox", :name => ("option" + option.id.to_s)}
							= option.option
				#multiple_choice_sol.hidden
					- for option in type.multiple_choice_options
						- if option.check
							%span= "option" + option.id.to_s
				%hr/
			- if type.class == Marktext
				#marktext
					%p
						%em
							- type.mark.split.each do |word|
								- if word.start_with? "#"
									%span.mark= word.delete "#"
								- else
									%span= word
				%hr/
			- if type.class == Cloze
				#gapquestion
					- type.cloze_text.split.each_with_index do |word, i|
						- if word.start_with? "#"
							%input{:type => "text", :name => "gap" + i.to_s}
						- else
							= word
				#gapquestion_sol.hidden
					- type.cloze_text.split.each_with_index do |word, i|
						- if word.start_with? "#"
							%span{:id => "gap#{i}"}= word.delete "#"
				%hr/
			- if type.class == Dropdown
				#dropdown
					- type.dropdown_definitions.each do |defi|
						%p
							= defi.definition
							%select 
								- defi.dropdown_options.each do |option|
									- if option.check
										%option.correct_option{:value => option.option}= option.option
									- else
										%option{:value => option.option}= option.option
				%hr/
			- if type.class == SingleChoice
				#single_choice
					- type.single_choice_options.each do |option|
						%p
							%input{:type => "radio", :name => "option", :id => "sc_option#{option.id}"}
							= option.option
				#single_choice_sol.hidden
					- type.single_choice_options.each do |option|
						- if option.check
							%span= "sc_option#{option.id}"
				%hr/

		#footer
			%a{:href => "#"}
				%img{:src => "file:///android_asset/support/arrow_left_play.png", :alt => "ZurÃ¼ck", :id => "back_btn"}/
			%input{:type => "button", :id => "done_btn", :name => "done_btn", :value => "Fertig"}
			- unless help.blank?
				%input{:type => "button", :name => "help_btn", :id => "help_btn", :value => "Hilfe"}
			%a{:href => "#"}
				%img{:src => "file:///android_assets/support/arrow_right_play.png", :alt => "Weiter", :id => "next_btn"}
		- unless help.blank?
			#help_text.hidden
				= help